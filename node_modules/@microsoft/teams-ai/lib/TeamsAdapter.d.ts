/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
/**
 * Note: this class should never modify the way `CloudAdapter` is
 * intended to work.
 */
import { CloudAdapter, ConfigurationBotFrameworkAuthenticationOptions, Request, Response, TurnContext } from 'botbuilder';
import { AuthenticationConfiguration, ConnectorClientOptions, ServiceClientCredentialsFactory } from 'botframework-connector';
import { INodeSocket, INodeBuffer } from 'botframework-streaming';
/**
 * An adapter that implements the Bot Framework Protocol and can be hosted in different cloud environments both public and private.
 */
export declare class TeamsAdapter extends CloudAdapter {
    readonly botFrameworkAuthConfig?: ConfigurationBotFrameworkAuthenticationOptions | undefined;
    /**
     * The credentials factory used by the bot adapter to create a [ServiceClientCredentials](xref:botframework-connector.ServiceClientCredentials) object.
     */
    readonly credentialsFactory: ServiceClientCredentialsFactory;
    get userAgent(): string;
    constructor(botFrameworkAuthConfig?: ConfigurationBotFrameworkAuthenticationOptions | undefined, credentialsFactory?: ServiceClientCredentialsFactory, authConfiguration?: AuthenticationConfiguration, connectorClientOptions?: ConnectorClientOptions);
    process(req: Request, res: Response, logic: (context: TurnContext) => Promise<void>): Promise<void>;
    process(req: Request, socket: INodeSocket, head: INodeBuffer, logic: (context: TurnContext) => Promise<void>): Promise<void>;
}
//# sourceMappingURL=TeamsAdapter.d.ts.map