/**
 * @module teams-ai
 */
/**
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */
import { TurnContext } from 'botbuilder-core';
import { Validation } from '../validators';
import { ChatCompletionAction } from '../models';
import { InnerMonologue, PromptResponse } from '../types';
import { Memory } from '../MemoryFork';
import { PromptSection } from '../prompts';
import { Plan } from '../planners';
import { Tokenizer } from '../tokenizers';
import { Augmentation } from './Augmentation';
/**
 * The 'monologue' augmentation.
 * @remarks
 * This augmentation adds support for an inner monologue to the prompt. The monologue helps the LLM
 * to perform chain-of-thought reasoning across multiple turns of conversation.
 */
export declare class MonologueAugmentation implements Augmentation<InnerMonologue | undefined> {
    private readonly _section;
    private readonly _monologueValidator;
    private readonly _actionValidator;
    /**
     * Creates a new `MonologueAugmentation` instance.
     * @param {ChatCompletionAction[]} actions - List of actions supported by the prompt.
     */
    constructor(actions: ChatCompletionAction[]);
    /**
     * @returns {PromptSection|undefined} Returns an optional prompt section for the augmentation.
     */
    createPromptSection(): PromptSection | undefined;
    /**
     * Validates a response to a prompt.
     * @param {TurnContext} context - Context for the current turn of conversation with the user.
     * @param {Memory} memory - An interface for accessing state values.
     * @param {Tokenizer} tokenizer - Tokenizer to use for encoding and decoding text.
     * @param {PromptResponse<string>} response - Response to validate.
     * @param {number} remaining_attempts - Number of remaining attempts to validate the response.
     * @returns {Validation} A `Validation` object.
     */
    validateResponse(context: TurnContext, memory: Memory, tokenizer: Tokenizer, response: PromptResponse<string>, remaining_attempts: number): Promise<Validation<InnerMonologue | undefined>>;
    /**
     * Creates a plan given validated response value.
     * @param {TurnContext} context - Context for the current turn of conversation.
     * @param {Memory} memory - An interface for accessing state variables.
     * @param {PromptResponse<InnerMonologue|undefined>} response - The validated and transformed response for the prompt.
     * @returns {Plan} The created plan.
     */
    createPlanFromResponse(context: TurnContext, memory: Memory, response: PromptResponse<InnerMonologue | undefined>): Promise<Plan>;
}
//# sourceMappingURL=MonologueAugmentation.d.ts.map