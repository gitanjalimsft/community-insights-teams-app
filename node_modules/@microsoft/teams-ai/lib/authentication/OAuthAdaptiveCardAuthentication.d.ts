import { TokenResponse, TurnContext } from 'botbuilder-core';
import { AdaptiveCardAuthenticationBase, AdaptiveCardLoginRequest } from './AdaptiveCardAuthenticationBase';
import { OAuthSettings } from './Authentication';
/**
 * @internal
 *
 * Handles authentication for Adaptive Cards in Teams.
 */
export declare class OAuthAdaptiveCardAuthentication extends AdaptiveCardAuthenticationBase {
    private readonly settings;
    /**
     * Creates a new instance of OAuthAdaptiveCardAuthentication.
     * @param {OAuthSettings} settings The OAuthSettings.
     */
    constructor(settings: OAuthSettings);
    /**
     * Handles the SSO token exchange.
     * @param {TurnContext} context The turn context.
     * @returns {Promise<TokenResponse | undefined>} A promise that resolves to the token response or undefined if token exchange failed.
     */
    handleSsoTokenExchange(context: TurnContext): Promise<TokenResponse | undefined>;
    /**
     * Handles the signin/verifyState activity.
     * @param {TurnContext} context The turn context.
     * @param {string} magicCode The magic code from sign-in.
     * @returns {Promise<TokenResponse | undefined>} A promise that resolves to undefined. The parent class will trigger silentAuth again.
     */
    handleUserSignIn(context: TurnContext, magicCode: string): Promise<TokenResponse | undefined>;
    /**
     * Gets the sign-in link for the user.
     * @param {TurnContext} context The turn context.
     * @returns {Promise<TokenResponse | undefined>} A promise that resolves to the sign-in link or undefined if no sign-in link available.
     */
    getLoginRequest(context: TurnContext): Promise<AdaptiveCardLoginRequest>;
}
//# sourceMappingURL=OAuthAdaptiveCardAuthentication.d.ts.map